# This file is part of the Dive framework.                       -*-Autotest-*-
#
# Dive is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Additional permission under section 7 of the GNU General Public
# License, version 3 ("GPLv3"):
#
# If you convey this file as part of a work that contains a
# configuration script generated by Autoconf, you may do so under
# terms of your choice.
#
# Dive is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Dive.  If not, see <http://www.gnu.org/licenses/>.

# AT_RUN_BACKGROUND(COMMAND, PID,
#                    [RUN-IF-SUCCESS], [RUN-IF-FAIL])
# --------------------------------------
# Start a background process.
# If the current test fails, the output of the background command
# will be stored to <COMMAND>.run.log.
#
# COMMAND is the command to run.
# PID is the variable where the pid will be stored.
# RUN-IF-SUCCESS will be executed if the command
#                    runs successfully (i.e. return 0).
# RUN-IF-FAIL will be executed if the command fails.
#
# FIXME: implement a safe way to be sure that
# the initialization is done.
m4_define([AT_RUN_BACKGROUND],[dnl
 m4_define([_at_run_stdout_log], [$1.stdout.log])
 m4_define([_at_run_stderr_log], [$1.stderr.log])
 AT_CAPTURE_FILE(_at_run_stdout_log)
 AT_CAPTURE_FILE(_at_run_stderr_log)

 echo "Launching \`\`$1'' in background."
 ($1 > _at_run_stdout_log 2> _at_run_stderr_log)&
 if test "$?" -eq "0"; then
  m4_ifval([$3], [$3], [:])
 else
  m4_ifval([$4], [$4], [:])
 fi
 # Add pid to list.
 $2="$$2 $!"
 echo "\`\`$1'' launched (process id = $$2)."
])

# AT_CHECK_RUN_BACKGROUND(COMMAND, PID,
#                         [STATUS = 0], STDOUT, STDERR,
#                         [RUN-IF-FAIL], [RUN-IF-PASS])
# --------------------------------------
# Start a background process and check the result.
# See AT_RUN_BACKGROUND for arguments description.
#
# FIXME: fail in a prettier way.
m4_define([AT_CHECK_RUN_BACKGROUND],[dnl
 at_check_run_ok=false
 AT_RUN_BACKGROUND([$1], [$2], [$6; at_check_run_ok=true], [$7])
 AT_CHECK([cat _at_run_stdout_log dnl
            && (cat _at_run_stderr_log >&2) dnl
            && test "x$at_check_run_ok" = "xtrue"],
          [$3], [$4], [$5])
])


# AT_KILL([PID])
# --------------------------------------
# Kill a process
# PID is the variable which contains the pid(s).
m4_define([AT_KILL],[dnl
 m4_ifval([$1], [kill "$1"])
])
