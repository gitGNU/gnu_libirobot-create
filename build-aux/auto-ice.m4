# This file is part of the Dive framework.                       -*-Autoconf-*-
#
# Dive is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Additional permission under section 7 of the GNU General Public
# License, version 3 ("GPLv3"):
#
# If you convey this file as part of a work that contains a
# configuration script generated by Autoconf, you may do so under
# terms of your choice.
#
# Dive is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Dive.  If not, see <http://www.gnu.org/licenses/>.

# serial 1

# ------ #
# README #
# ------ #

# This file allows configure to detect the Ice middle-ware.
# Use ICE_PROG_SLICE2* to detect slice2* binaries.
# It will define two precious variables:
# SLICE2* : slice2* command
# SLICE2*FLAGS : slice2* additional flags
#
# This file has been tested with Ice 3.2.1 on Linux.
#
# See the http://www.zeroc.com/ for more information about Ice.

# ---- #
# TODO #
# ---- #

# Replace ``main'' by real symbols in the macros which are
# searching for libraries.


m4_pattern_forbid([^_?ICE_])

# _ICE_CHECK_LIB()
# --------------------------------------
# Try to detect a library and set the
# corresponding fail variable.
AC_DEFUN([_ICE_CHECK_LIB],
[AC_CHECK_LIB([$1], [$2], [], [m4_tolower([$1_lib_fail])=yes])
]) # _ICE_CHECK_LIB

# ICE_LIB()
# --------------------------------------
# Try to detect the main ICE library.
AC_DEFUN([ICE_LIB],
[_ICE_CHECK_LIB([Ice], [main])
]) # ICE_LIB

# ICE_LIB_ICEBOX()
# --------------------------------------
# Try to detect the IceBox library.
AC_DEFUN([ICE_LIB_ICEBOX],
[_ICE_CHECK_LIB([IceBox], [main])
]) # ICE_LIB_ICEBOX

# ICE_LIB_ICEGRID()
# --------------------------------------
# Try to detect the IceGrid library.
AC_DEFUN([ICE_LIB_ICEGRID],
[_ICE_CHECK_LIB([IceGrid], [main])
]) # ICE_LIB_ICEGRID

# ICE_LIB_ICEPATCH2()
# --------------------------------------
# Try to detect the IcePatch2 library.
AC_DEFUN([ICE_LIB_ICEPATCH2],
[_ICE_CHECK_LIB([IcePatch2], [main])
]) # ICE_LIB_ICEPATCH2

# ICE_LIB_ICESSL()
# --------------------------------------
# Try to detect the IceSsl library.
AC_DEFUN([ICE_LIB_ICESSL],
[_ICE_CHECK_LIB([IceSSL], [main])
]) # ICE_LIB_ICESSL

# ICE_LIB_ICESTORM()
# --------------------------------------
# Try to detect the IceStorm library.
# Required by Freeze.
AC_DEFUN([ICE_LIB_ICESTORM],
[_ICE_CHECK_LIB([IceStorm], [main])
]) # ICE_LIB_ICESTORM

# ICE_LIB_ICESTORMSERVICE()
# --------------------------------------
# Try to detect the IceStorm service library.
# Required by Freeze.
AC_DEFUN([ICE_LIB_ICESTORM],
[_ICE_CHECK_LIB([IceStormService], [main])
]) # ICE_LIB_ICESTORMSERVICE

# ICE_LIB_UTIL()
# --------------------------------------
# Try to detect the IceUtil library.
AC_DEFUN([ICE_LIB_UTIL],
[_ICE_CHECK_LIB([IceUtil], [main])
]) # ICE_LIB_UTIL

# ICE_LIB_XML()
# --------------------------------------
# Try to detect the IceXML library.
AC_DEFUN([ICE_LIB_XML],
[_ICE_CHECK_LIB([IceXML], [main])
]) # ICE_LIB_XML


# _ICE_PROG_SLICE(TOOL-SUFFIX, VALUE-IF-FOUND, [VALUE-IF-NOT-FOUND], [PATH],
#                 [REJECT])
# --------------------------------------
# Try to detect in a generic way a slice2* binary.
# TOOL-SUFFIX is the tool suffix (the part after slice2): cpp, freeze...
# The other arguments are forwarded to the AC_CHECK_PROG macro.
AC_DEFUN([_ICE_PROG_SLICE],
[
  AC_ARG_VAR(m4_toupper([SLICE2$1]), [ICE ``$1'' command])
  AC_ARG_VAR(m4_toupper([SLICE2$1FLAGS]), [ICE ``$1'' flags])
  AC_CHECK_PROG(m4_toupper([SLICE2$1]), m4_tolower([slice2$1]),
                           [$2], [$3], [$4], [$5])
]) # _ICE_PROG_SLICE


# ICE_PROG_SLICE2CPP()
# --------------------------------------
# Try to detect the slice2cpp binary.
AC_DEFUN([ICE_PROG_SLICE2CPP],
[_ICE_PROG_SLICE([cpp], [slice2cpp])
]) # ICE_PROG_SLICE2CPP

# ICE_PROG_SLICE2DOCBOOK()
# --------------------------------------
# Try to detect the slice2docbook binary.
AC_DEFUN([ICE_PROG_SLICE2DOCBOOK],
[_ICE_PROG_SLICE([cpp], [slice2docbook])
]) # ICE_PROG_SLICE2DOCBOOK

# ICE_PROG_SLICE2FREEZEJ()
# --------------------------------------
# Try to detect the slice2freezej binary.
AC_DEFUN([ICE_PROG_SLICE2FREEZEJ],
[_ICE_PROG_SLICE([cpp], [slice2freezej])
]) # ICE_PROG_SLICE2FREEZEJ

# ICE_PROG_SLICE2JAVA()
# --------------------------------------
# Try to detect the slice2java binary.
AC_DEFUN([ICE_PROG_SLICE2JAVA],
[_ICE_PROG_SLICE([cpp], [slice2java])
]) # ICE_PROG_SLICE2JAVA

# ICE_PROG_SLICE2RB()
# --------------------------------------
# Try to detect the slice2rb binary.
AC_DEFUN([ICE_PROG_SLICE2RB],
[_ICE_PROG_SLICE([cpp], [slice2rb])
]) # ICE_PROG_SLICE2RB

# ICE_PROG_SLICE2CS()
# --------------------------------------
# Try to detect the slice2cs binary.
AC_DEFUN([ICE_PROG_SLICE2CS],
[_ICE_PROG_SLICE([cpp], [slice2cs])
]) # ICE_PROG_SLICE2CS

# ICE_PROG_SLICE2FREEZE()
# --------------------------------------
# Try to detect the slice2freeze binary.
AC_DEFUN([ICE_PROG_SLICE2FREEZE],
[_ICE_PROG_SLICE([cpp], [slice2freeze])
]) # ICE_PROG_SLICE2FREEZE

# ICE_PROG_SLICE2HTML()
# --------------------------------------
# Try to detect the slice2html binary.
AC_DEFUN([ICE_PROG_SLICE2HTML],
[_ICE_PROG_SLICE([cpp], [slice2html])
]) # ICE_PROG_SLICE2HTML

# ICE_PROG_SLICE2PY()
# --------------------------------------
# Try to detect the slice2py binary.
AC_DEFUN([ICE_PROG_SLICE2PY],
[_ICE_PROG_SLICE([cpp], [slice2py])
]) # ICE_PROG_SLICE2PY

# ICE_PROG_SLICE2VB()
# --------------------------------------
# Try to detect the slice2vb binary.
AC_DEFUN([ICE_PROG_SLICE2VB],
[_ICE_PROG_SLICE([cpp], [slice2vb])
]) # ICE_PROG_SLICE2VB


# ICE_PROG_SLICE2VB()
# --------------------------------------
# Try to detect the slice2vb binary.
AC_DEFUN([ICE_PROG_SLICE2VB],
[_ICE_PROG_SLICE([cpp], [slice2vb])
]) # ICE_PROG_SLICE2VB

# ICE_CXX([ADDITIONAL-CHECK])
# --------------------------------------
# Check for (optional) Ice C++ support.
# - add --with-ice flag to configure,
# - search for slice2cpp,
# - search for -lIce,
# - provide ICE_CXX Automake conditional.
# You can provide additional checks through the  optional
# argument.
#
# ##################################################
# # --with-ice   # check result # configure result #
# ##################################################
# # check (auto) # yes          # enable Ice       #
# # check (auto) # no           # disable Ice      #
# # yes          # yes          # enable Ice       #
# # yes          # no           # ERROR            #
# # no           # yes          # disable Ice      #
# # no           # no           # disable Ice      #
# ##################################################
#
AC_DEFUN([ICE_CXX],
[
  AC_ARG_WITH([ice],
  [AS_HELP_STRING([--with-ice],
    [enable Ice C++ support])],
  [],
  [with_ice=check])

  AC_SUBST([DISTCHECK_CONFIGURE_FLAGS],
           ["$DISTCHECK_CONFIGURE_FLAGS '--with-ice=$with_ice'"])

  ice_fail=no
  AS_IF([test "x$with_ice" != xno],
    [
      # Search for slice2cpp.
      ICE_PROG_SLICE2CPP
      if test "x$SLICE2CPP" = x; then
        ice_fail=yes
      fi

      # Search for ICE main library.
      ICE_LIB
      if test "x$ice_lib_fail" = xyes; then
        ice_fail=yes
      fi

      # Additional checks
      $1

      # If Ice support was explicitly required, the build fails.;
      AS_IF([test "x$with_ice" = xyes && test "x$ice_fail" = xyes],
        [AC_MSG_FAILURE(
           [Ice test failed (--without-ice to disable)])
        ])
    ])

  AM_CONDITIONAL([ICE],
                 [test "x$with_ice" != xno && test "x$ice_fail" != xyes])
]) # ICE_CXX
